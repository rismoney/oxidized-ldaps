{
        http_port 80
        https_port 443
        debug
        auto_https disable_redirects

        order authenticate before respond
        order authorize before basicauth

        security {
                local identity store localdb {
                        realm local
                        path {$HOME}/.local/caddy/users.json
                }

                # oauth identity provider github {env.GITHUB_CLIENT_ID} {env.GITHUB_CLIENT_SECRET}

                ldap identity store example.local {
                        realm example.local
                        servers {
                                 ldaps://DC.example.local
                        }
                        trusted_authority /etc/caddy/root.pem
                        trusted_authority /etc/caddy/sub.pem
                        attributes {
                                name givenName
                                surname sn
                                username sAMAccountName
                                member_of memberOf
                                email mail
                        }
                        username "Cn=svc-oxidized,OU=ServiceAccounts,DC=example,DC=local"
                        password "SuperSecret"
                        search_base_dn "DC=example,DC=local"
                        search_filter "(&(|(sAMAccountName=%s)(mail=%s))(objectclass=user))"
                        groups {
                                "CN=sec_oxidized_adm,OU=PrivilegedSecurityGroups,DC=example,DC=local" authp/admin
                        }

                }

                authentication portal myportal {

                        crypto default token lifetime 3600
                        # crypto key sign-verify {env.JWT_SHARED_KEY}
                        enable identity store localdb
                        enable identity store example.local
                        #cookie insecure on
                        transform user {
                                match realm local
                                require mfa
                        }
                        cookie domain example.com
                        ui {
                           links {
                              "Oxidized" https://oxidized.example.com:8443/
                              "My Identity" https://oxidized.example.com/whoami
                           }
                        }
                }

                authorization policy mypolicy {
                        # https://oxidized.example.com:8888/ disable auth redirect
                        set auth url https://oxidized.example.com/
                        allow roles authp/admin authp/user
                        # crypto key verify {env.JWT_SHARED_KEY}
                }
        }
}

(tls_config) {
    tls /etc/caddy/oxidized.crt /etc/caddy/key.pem {
      ca_root /etc/caddy/chain.pem
    }
}

oxidized.example.com {
  import tls_config
  authenticate with myportal
}

https://oxidized.example.com:8443 {
  import tls_config
  authorize with mypolicy
  reverse_proxy http://oxidized.example.com:8888
}
